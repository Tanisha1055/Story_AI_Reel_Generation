
import os
from moviepy import VideoFileClip, concatenate_videoclips, TextClip, CompositeVideoClip
from moviepy import ImageClip, concatenate_videoclips
from moviepy.video import fx as vfx


os.environ["FFMPEG_BINARY"] = "C:/ffmpeg/bin/ffmpeg.exe"
# --- STAGE 5 (Dynamic Video Clip Generation using MoviePy) ---
# NOTE: Renamed to match the call in pipeline.py
def generate_dynamic_video_clip(config, scene_id, frame_path, motion_prompt):
    """Generates a dynamic video clip from a static frame using moviepy motion effects."""
    print(f"Generating dynamic clip for Scene {scene_id} with motion: '{motion_prompt}'...")

    clip_filename = os.path.join(config['output_dir'], f"scene_{scene_id}_clip.mp4")

    try:
        # Create a static image clip
        duration = config.get('scene_duration_seconds', 5)
        clip = ImageClip(frame_path, duration=duration)
        clip.fps = 24  # ✅ safe and compatible for all MoviePy versions

        width, height = clip.size

        # (Optional) Apply light zoom or motion if needed
        # For example: simulate a push-in (Ken Burns effect)
        clip = clip.fx(vfx.zoom_in, factor=1.05) if hasattr(vfx, "zoom_in") else clip

        # Write the video file
        clip.write_videofile(
            clip_filename,
            fps=24,
            codec='libx264',  # ✅ ensures MP4 compatibility
            audio=False,
            logger=None
        )

        print(f"✅ Dynamic video clip saved: {clip_filename}")
        return clip_filename

    except Exception as e:
        raise RuntimeError(f"Video clip generation failed for Scene {scene_id}: {e}")



# --- STAGE 6.1: Final Reel Assembly (MoviePy) ---
def assemble_final_reel(config, clip_paths, story_data):
    """Loads clip paths and stitches them into the final video reel."""
    print("\n--- Stitching Final Reel ---")
    final_reel_path = os.path.join(config['output_dir'], config['final_reel_name'])
    
    all_clips = []
    # Load all clips from their paths
    for path in clip_paths:
        try:
            # FIX: Use VideoFileClip to load MP4 files generated by write_videofile
            clip = VideoFileClip(path) 
            all_clips.append(clip)
        except Exception as e:
            print(f"Warning: Could not load clip {path}. Skipping. Error: {e}")
            
    if not all_clips:
        raise Exception("No valid video clips were generated or loaded for final assembly.")

    # Concatenate all scene clips
    final_clip = concatenate_videoclips(all_clips)
    
    # Write the final file
    final_clip.write_videofile(
        final_reel_path, 
        codec='libx264', 
        audio_codec='aac', 
        fps=24, 
        logger='bar'
    )
    
    # Important: Close all clips to free resources
    for clip in all_clips:
        clip.close()
    